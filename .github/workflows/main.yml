name: Build and Upload Executable

on:
  workflow_dispatch:  # 手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4  # 使用最新的 v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4  # 使用最新的 v4
        with:
          python-version: '3.10'  # 设置合适的 Python 版本

      # Step 3: Install dependencies (pyinstaller)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          
      # Step 4: Use pyinstaller to build the .py file into an executable
      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile ChaoXingDownload.py  # 确保文件名正确
        # 打包后的文件将出现在 dist/ 目录中

      # Step 5: Upload the built artifact
      - name: Upload built artifact
        uses: actions/upload-artifact@v4  # 更新到 v4
        with:
          name: built-executable
          path: dist/ChaoXingDownload  # 确保此路径为生成的可执行文件路径

      # Step 6: Create a new GitHub release and upload the executable
      - name: Create Release
        uses: actions/create-release@v2  # 使用最新版本 v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'manual-run-${{ github.run_id }}'  # 为每次运行创建独立 tag
          release_name: Manual Run Release
          draft: false
          prerelease: false

      # Step 7: Upload Release Asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/ChaoXingDownload  # 确保路径为打包的可执行文件路径
          asset_name: ChaoXingDownload  # 你希望上传后的文件名
          asset_content_type: application/octet-stream
